// ==UserScript==
// @name         Attacks Checker v1.3
// @version      1.3
// @description  Check attacks on villages based on "attacks"
// @author       Foxtal
// @match        *.plemiona.pl/game.php*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=plemiona.pl
// @grant        unsafeWindow
// ==/UserScript==

/*
1.1  - add villages list and colors
1.2 - remove(NOT WORK) (temporary) medium off, add delay percentage,increase output delay
1.3 - display villages only with missing attacks, add counter "toEarly" commands, fixed find medium off in large, read checker commands, add addtionals attacks, add summary

TODO:
konwerter opóźnienia każdego typu ataku
wyrzucić cofające się ataki
*/

//          Config               //


let delay = 1*60*60 // hh*mm*ss
let toEarlyDelay = 6*60*60 // hh*mm*ss

let colorGreen = '0eae0e'
let colorGrey = '8d8d55'
let colorOrange = 'd47e33'
let colorRed = 'ff0000'
let colorBlack = '000000'

let attacksTypeTextTranslation =
    {
        "snob": "Szlachcic",
        "offSnob": "Offoszlachta",
        "big": "Duży off",
        "small": "Średni off",
        "fake": "Burzak/fejk"
    }

let attacksType = {
    'attack_small,snob': {"name":"snob"} ,
    'attack_large,snob': {"name":"offSnob"} ,
    'attack_medium,snob': {"name":"offSnob"} ,
    'attack_large': {"name":"big"} ,
    'attack_medium': {"name":"small"} ,
    'attack_small': {"name":"fake"} ,
}


let attacks =


    
    
    //         END Config               //

//Global function - init
let menuRow = document.getElementById("foxtalMenu").children[0]
let tr = document.createElement("tr")
tr.innerHTML = `

<td class="menu-column-item"><a onclick='foxtalAttacksChecker()'>Attacks Checker(BETA)</a></td>

`
menuRow.insertBefore(tr,menuRow.firstChild)
///



// Global function - function
let output = []
let villagesOutput = []
let sumAdditionalAttack = 0
unsafeWindow.foxtalAttacksChecker = async function foxtalAttacksChecker()
{

    let startTime = new Date();
    let keys = Object.keys(attacks);

    let keysCount = keys.length;
    let html = `<head></head><body><p><h2>Player Info</h2></p><p><textarea readonly=true style="width: 50vw; height: 20vh" id = "playerOutput">Postęp wiosek: 0/${keysCount}</textarea>
<p><h2>Villages Info</h2></p>
<textarea readonly = true style="width: 50vw; height: 20vh" id = "villagesOutput"></textarea></p></body>`
    Dialog.show("Tribe data", html);

    let playerOutputField = document.getElementById('playerOutput');
    let villagesOutputField = document.getElementById('villagesOutput');
    let currentKey = 0


    for( target in attacks)
    {
        currentKey++
        let endTime = new Date();
        let duration = endTime - startTime;

        let durationInSeconds = duration / 1000;

        playerOutputField.value = `Postęp wiosek: ${currentKey}/${keysCount} w ${durationInSeconds} s`

        let sumDelay = Math.floor(Math.random()  * (105 - 75 + 1)) + 75
        console.log(`Oczekiwanie przez ${sumDelay} ms...`);


        await checkPlayerVillages(target, attacks[target]);

        await new Promise(resolve => setTimeout(resolve, sumDelay));
    }




    async  function checkPlayerVillages(target, attacks)
    {

        //console.time('program');

        fetch('game.php?screen=info_village&id='+target).then(function (response) {
            if (response.ok) {
                return response.text();
            }
            throw response;
            throw response;
        }).then(function (text) {
            let parser = new DOMParser();
            let start = text.indexOf(`<div id="commands_outgoings"`)
            let end = text.indexOf(`report_table`)
            let htmlString = text.substring(start,end)
            let doc = parser.parseFromString(htmlString, 'text/html');
            let tableRows = doc.getElementsByClassName(`command-row`)

            // to optimize
            let doc2 = parser.parseFromString(text, 'text/html');
            let coord = doc2.querySelector("table.content-border table table td table tbody").children[2].children[1].innerText
            //
            for(const command of attacks)
            {
                let attackerName = command.player
                let typeOfOrder = command.typeOfOrder
                let windowEnd = command.timeWindowEnd



                if (!output[attackerName]) {
                    output[attackerName] = {};
                }


                if (!output[attackerName][typeOfOrder]) {
                    output[attackerName][typeOfOrder] = {
                        'onTime': 0,
                        'delay': 0,
                        'bigDelay':0,
                        'toEarly': 0,
                        'toSend': 0,
                        'additionalAttack': 0
                    };
                }

                if(typeOfOrder == 'offSnob' || typeOfOrder == 'snob' || typeOfOrder == 'big' || typeOfOrder == 'small')
                {
                    if (!villagesOutput[target]) {
                        villagesOutput[target] = {
                            'coord': coord
                        };
                    }


                    if (!villagesOutput[target][typeOfOrder]) {
                        villagesOutput[target][typeOfOrder] = {
                            'send': 0,
                            'toSend': 0,
                        };
                    }
                    villagesOutput[target][typeOfOrder]["toSend"]++
                }

                let find = false
                const rowsToRemove = [];
                for (const tableRow of tableRows) {

                    const playerDiv = tableRow.querySelectorAll('.quickedit-label')
                    const playerInfo = playerDiv[0].innerHTML.trim().split(':')

                    let playerName = playerInfo[0]
                    if(playerInfo.length == 1) {
                        playerName = TribalWars.getGameData().player.name

                    }
                    ///// temp resolve
                    if(playerName == 'Cel Pal x Drwal')
                    {
                        playerName = 'cel pal'
                    } else if(playerName == 'kruku112')
                    {
                        playerName = 'kruku112 x Darthir'
                    }

                    ////

                    if(attackerName == playerName && !find)
                    {
                        const iconContainer = tableRow.querySelectorAll('.icon-container')[0];


                        const attackSmallImg = iconContainer.querySelector('img[src*="attack_small"]');
                        const attackMediumImg = iconContainer.querySelector('img[src*="attack_medium"]');
                        const attackLargeImg = iconContainer.querySelector('img[src*="attack_large"]');
                        const snobImg = iconContainer.querySelector('img[src*="snob"]');

                        let thisAttackType = 'undefinied'

                        if (attackSmallImg) {
                            thisAttackType = 'attack_small';
                        } else if (attackMediumImg) {
                            thisAttackType = 'attack_medium';
                        } else if (attackLargeImg) {
                            thisAttackType = 'attack_large';
                        }
                        if (snobImg) {
                            thisAttackType += ',snob';
                        }
                        // if undefinied = support command
                        if(thisAttackType == 'undefinied')
                        console.log(iconContainer)
                        if(thisAttackType != 'undefinied' && attacksType[thisAttackType].name == typeOfOrder)
                        {

                            const spanWithCommandTime = tableRow.querySelector('span[data-endtime]');
                            const commandTime = spanWithCommandTime.getAttribute('data-endtime')

                            if(commandTime < windowEnd - toEarlyDelay)
                            {
                                output[attackerName][typeOfOrder]['toEarly']++
                            } else if(commandTime < windowEnd ){
                                output[attackerName][typeOfOrder]['onTime']++
                            } else if(commandTime < windowEnd + delay){
                                output[attackerName][typeOfOrder]['delay']++
                            } else {
                                output[attackerName][typeOfOrder]['bigDelay']++
                            }

                            if(typeOfOrder == 'offSnob' || typeOfOrder == 'snob' || typeOfOrder == 'big' || typeOfOrder == 'small')
                                villagesOutput[target][typeOfOrder]["send"]++

                            find = true
                            rowsToRemove.push(tableRow);



                        }


                    }

                }

                for (const row of rowsToRemove) {
                    row.remove();
                }
                // find medium attack in large

                if(!find && (typeOfOrder == attacksType['attack_medium'].name || (typeOfOrder == attacksType['attack_medium,snob'].name))) {

                    for (const tableRow of tableRows) {
                        const playerDiv = tableRow.querySelectorAll('.quickedit-label')
                        const playerInfo = playerDiv[0].innerHTML.trim().split(':')

                        let playerName = playerInfo[0]
                        if(playerInfo.length == 1) {
                            playerName = TribalWars.getGameData().player.name

                        }
                        if(playerName == 'Cel Pal x Drwal')
                        {
                            playerName = 'cel pal'
                        } else if(playerName == 'kruku112')
                        {
                            playerName = 'kruku112 x Darthir'
                        }


                        if(attackerName == playerName && !find)
                        {
                            const iconContainer = tableRow.querySelectorAll('.icon-container')[0];
                            const attackLargeImg = iconContainer.querySelector('img[src*="attack_large"]');
                            const snobImg = iconContainer.querySelector('img[src*="snob"]');

                            let thisAttackType = 'undefinied'

                            if (attackLargeImg) {
                                thisAttackType = 'attack_medium';
                                if (snobImg) {
                                    thisAttackType += ',snob';
                                }
                            }

                            // if undefinied = support or own command
                            if(thisAttackType == 'undefinied')
                                console.log(iconContainer)
                            if(thisAttackType != 'undefinied' && attacksType[thisAttackType].name == typeOfOrder)
                            {

                                const spanWithCommandTime = tableRow.querySelector('span[data-endtime]');
                                const commandTime = spanWithCommandTime.getAttribute('data-endtime')

                                if(commandTime < windowEnd - toEarlyDelay)
                                {
                                    output[attackerName][typeOfOrder]['toEarly']++
                                } else if(commandTime < windowEnd ){
                                    output[attackerName][typeOfOrder]['onTime']++
                                } else if(commandTime < windowEnd + delay){
                                    output[attackerName][typeOfOrder]['delay']++
                                } else {
                                    output[attackerName][typeOfOrder]['bigDelay']++
                                }

                                if(typeOfOrder == 'offSnob' || typeOfOrder == 'snob' || typeOfOrder == 'big' || typeOfOrder == 'small')
                                    villagesOutput[target][typeOfOrder]["send"]++

                                find = true
                                tableRow.remove()

                            }


                        }
                    }
                }
                output[attackerName][typeOfOrder]['toSend']++


            }
            // remanings commands


            for (const tableRow of tableRows) {

                const playerDiv = tableRow.querySelectorAll('.quickedit-label')
                const playerInfo = playerDiv[0].innerHTML.trim().split(':')

                let playerName = playerInfo[0]
                if(playerInfo.length == 1) {
                    playerName = TribalWars.getGameData().player.name

                }
                ///// temp resolve
                if(playerName == 'Cel Pal x Drwal')
                {
                    playerName = 'cel pal'
                } else if(playerName == 'kruku112')
                {
                    playerName = 'kruku112 x Darthir'
                }


                ////

                const iconContainer = tableRow.querySelectorAll('.icon-container')[0];

                const attackSmallImg = iconContainer.querySelector('img[src*="attack_small"]');
                const attackMediumImg = iconContainer.querySelector('img[src*="attack_medium"]');
                const attackLargeImg = iconContainer.querySelector('img[src*="attack_large"]');
                const snobImg = iconContainer.querySelector('img[src*="snob"]');

                let thisAttackType = 'undefinied'

                if (attackSmallImg) {
                    thisAttackType = 'attack_small';
                } else if (attackMediumImg) {
                    thisAttackType = 'attack_medium';
                } else if (attackLargeImg) {
                    thisAttackType = 'attack_large';
                }


                    // disable atm
                    /*
                        if (snobImg) {
                            thisAttackType += ',snob';
                        }
                       */
                //temp
                let attackerName = playerName


                if(thisAttackType != 'undefinied')
                {
                    let typeOfOrder=attacksType[thisAttackType].name

                    if (!output[attackerName]) {
                        output[attackerName] = {};
                    }

                        if (!output[attackerName][typeOfOrder]) {
                            output[attackerName][typeOfOrder] = {
                                'onTime': 0,
                                'delay': 0,
                                'bigDelay':0,
                                'toEarly': 0,
                                'toSend': 0,
                                'additionalAttack': 0
                            };
                        }


                    output[playerName][typeOfOrder]['additionalAttack']++
                    sumAdditionalAttack++


                    }

            }


        })
        //console.timeEnd('program');

    }


    /////
    setTimeout(() => {
        let sumOutput = `([color=#${colorGreen}]OK[/color] [color=#${colorGrey}]Małe opóźnienie[/color] [color=#${colorOrange}]Duże opóźnienie[/color] [color=#${colorBlack}]Za wcześnie[/color] [color=#${colorRed}]Brak wysyłki[/color]) ataki spoza rozpiski
`
        let sumOutputLate = ``
        for(let player in output)
        {
            let calculatedOutput = ''
            let sumSend = 0
            let sumToSend = 0
            let sumDelayed = 0
            let playerAttacks = output[player]
            let color = ''
            let notFakeSum = 0
            let sumAdditionalAttacks = 0

            for (let attackType in playerAttacks)
            {
                let onTime = playerAttacks[attackType]['onTime']
                let delay = playerAttacks[attackType]['delay']
                let bigDelay = playerAttacks[attackType]['bigDelay']
                let toEarly = playerAttacks[attackType]['toEarly']
                let toSend = playerAttacks[attackType]['toSend']
                let additionalAttack = playerAttacks[attackType]['additionalAttack']

                let sumSendType = onTime + delay + bigDelay + toEarly

                if(attackType!="fake")
                {
                    sumDelayed += delay + bigDelay + toEarly
                    notFakeSum += sumSendType
                }

                let attackTypeTT = attacksTypeTextTranslation[attackType]
                sumAdditionalAttacks += additionalAttack
                sumSend += sumSendType
                sumToSend += toSend
                calculatedOutput += `${attackTypeTT} - ${sumSendType}/${toSend} ([color=#${colorGreen}]${onTime}[/color] [color=#${colorGrey}]${delay}[/color] [color=#${colorOrange}]${bigDelay}[/color] [color=#${colorBlack}]${toEarly}[/color] [color=#${colorRed}]${toSend-sumSendType}[/color]) ${additionalAttack}\n`


            }
            let percentage = ((sumSend / sumToSend) * 100).toFixed(2)
            switch (true) {
                case (percentage > 90):
                    color = colorGreen;
                    break;
                case (percentage <= 90 && percentage > 80):
                    color = colorOrange;
                    break;
                default:
                    color = colorRed;
                    break;
            }
            let delayedPercentage = 0
            if(notFakeSum != 0)
                delayedPercentage = ((sumDelayed / notFakeSum) * 100).toFixed(2)

            let delayedColor = ''
            switch (true) {
                case (delayedPercentage < 10):
                    delayedColor = colorGreen;
                    break;
                case (delayedPercentage >= 10 && delayedPercentage < 20):
                    delayedColor = colorOrange;
                    break;
                default:
                    delayedColor = colorRed;
                    break;
            }
            let temp = `[player]${player}[/player] wysłał ${sumSend} z ${sumToSend} rozkazów ([color=#${color}][b]${percentage}%[/b][/color]) z czego ${sumDelayed} spóźnionych/wysłanych za wcześnie ([color=#${delayedColor}][b]${delayedPercentage}%[/b][/color]) offów lub grubych
${calculatedOutput}[b]${sumAdditionalAttacks}[/b] dodatkowych ataków\n\n `

            if(percentage > 90)
            {
                sumOutput += temp
            } else {

                sumOutputLate += temp
            }
        }



        //Villages Output

        let sumVillagesOutput = `Wysłane/łącznie do wysłania\n`
        let sumVillagesSendAndToSend = {}
        for(let village in villagesOutput)
        {
            let calculatedOutput = ''
            let sumSend = 0;
            let sumToSend = 0;
            let coord = ''
            let villageAttacks = villagesOutput[village]




            for (let villageAttackType in villageAttacks)
            {
                let send = 0;
                let toSend = 0;
                if(villageAttackType != 'coord')
                {

                    let send = villageAttacks[villageAttackType]['send']
                    let toSend = villageAttacks[villageAttackType]['toSend']
                    let result = toSend - send

                    if (!sumVillagesSendAndToSend[villageAttackType]) {
                        sumVillagesSendAndToSend[villageAttackType] = {
                            'send': 0,
                            'toSend': 0,
                        };
                    }
                    sumVillagesSendAndToSend[villageAttackType]['send'] += send
                    sumVillagesSendAndToSend[villageAttackType]['toSend'] += toSend
                    if(toSend>0)
                    {
                        let attackTypeTT = attacksTypeTextTranslation[villageAttackType]
                        let color = ''
                        switch (true) {
                            case (result == 0):
                                color = colorGreen;
                                break;
                            case (result <= 2 && result > 0):
                                color = colorOrange;
                                break;
                            default:
                                color = colorRed;
                                break;
                        }
                        calculatedOutput += `${attackTypeTT} - ${send}/${toSend} ([color=#${color}]${result}[/color])\n`
                        sumSend += send
                        sumToSend += toSend
                    }

                } else {
                    coord = villageAttacks[villageAttackType]
                }




            }

            let sumResult = sumToSend - sumSend;

            if(sumToSend>0 && sumResult > 0)
            {
                let percentage = ((sumSend / sumToSend) * 100).toFixed(2)
                let color = ''
                switch (true) {
                    case (percentage > 90):
                        color = colorGreen;
                        break;
                    case (percentage <= 90 && percentage > 80):
                        color = colorOrange;
                        break;
                    default:
                        color = colorRed;
                        break;
                }
                sumVillagesOutput += `${coord} - ${sumSend} z ${sumToSend} rozkazów ([color=#${color}]${percentage}%[/color]) \n  ${calculatedOutput}\n`
            }
        }
        // sum all commands
        let villagesOutputHeader = '[i]Podsumowanie wysyłki plemienia:[/i]\n'
        for (let villageAttackType in sumVillagesSendAndToSend) {
            if (sumVillagesSendAndToSend.hasOwnProperty(villageAttackType)) {
                let sumSend = sumVillagesSendAndToSend[villageAttackType]['send']
                let sumToSend = sumVillagesSendAndToSend[villageAttackType]['toSend']
                let percentage = ((sumSend / sumToSend) * 100).toFixed(2)
                 let color = ''
                 switch (true) {
                     case (percentage > 90):
                         color = colorGreen;
                         break;
                     case (percentage <= 90 && percentage > 80):
                         color = colorOrange;
                         break;
                     default:
                         color = colorRed;
                         break;
                 }
                let attackTypeTT = attacksTypeTextTranslation[villageAttackType]
                villagesOutputHeader += `Typ ataku: [b]${attackTypeTT}[/b]
wysłano łącznie ${sumSend} na ${sumToSend} ([color=#${color}]${percentage}%[/color])\n\n`
            }
        }
        // sum additional attacks
        sumAdditionalAttackOutput = `Łączne ataki spoza rozpiski (fejkomat): [b]${sumAdditionalAttack}[/b]`

        playerOutputField.value = sumOutput + `\n\n========================================================================\n\n ` + sumOutputLate
        villagesOutputField.value = villagesOutputHeader + sumAdditionalAttackOutput + "\n\n========================================================================\n\n" + sumVillagesOutput
    },2500)

}
